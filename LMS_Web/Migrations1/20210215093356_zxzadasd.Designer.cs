// <auto-generated />
using System;
using LMS_Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LMS_Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210215093356_zxzadasd")]
    partial class zxzadasd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LMS_Web.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NID")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Religion")
                        .HasColumnType("text");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("SectionId");

                    b.HasIndex("WingId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "352ef6af-8b2e-4d0d-bb01-88dfa619f9f2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1991, 2, 15, 15, 33, 55, 253, DateTimeKind.Local).AddTicks(1590),
                            ConcurrencyStamp = "c00fcf43-bb53-4671-91cd-2fb94c70f1cb",
                            CreatedDateTime = new DateTime(2021, 2, 15, 15, 33, 55, 250, DateTimeKind.Local).AddTicks(4846),
                            DepartmentId = 1,
                            DesignationId = 1,
                            Email = "hmuzzal@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Hasan",
                            FullName = "Hasan Mahmud",
                            Gender = "Male",
                            Image = "1.jpg",
                            IsActive = true,
                            JoiningDate = new DateTime(2011, 2, 15, 15, 33, 55, 253, DateTimeKind.Local).AddTicks(5301),
                            LastName = "Mahmud",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIW60+N8AuqIonyaDD/ODWNY/GCLpkM2khiNDoTwsWZEtyg+iIjuAgGIej2cqvNiKA==",
                            PhoneNumber = "01715637290",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "IEC2QG3OUXJYUJGNKQBKIWXFGXKHVEXF",
                            TwoFactorEnabled = false,
                            UserName = "01715637290"
                        },
                        new
                        {
                            Id = "352ef6af-8b2e-4l0d-bb01-88dfa619f6o2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1991, 2, 15, 15, 33, 55, 254, DateTimeKind.Local).AddTicks(3006),
                            ConcurrencyStamp = "c00fcf43-bb53-4671-91cd-2fb94c70f1cb",
                            CreatedDateTime = new DateTime(2021, 2, 15, 15, 33, 55, 254, DateTimeKind.Local).AddTicks(2970),
                            DepartmentId = 1,
                            DesignationId = 1,
                            Email = "hmuzzal@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Safkat",
                            FullName = "Safkat Mahmud",
                            Gender = "Male",
                            Image = "2.jpg",
                            IsActive = true,
                            JoiningDate = new DateTime(2011, 2, 15, 15, 33, 55, 254, DateTimeKind.Local).AddTicks(3059),
                            LastName = "Mahmud",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIW60+N8AuqIonyaDD/ODWNY/GCLpkM2khiNDoTwsWZEtyg+iIjuAgGIej2cqvNiKA==",
                            PhoneNumber = "01715637291",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "IEC2QG3OUXJYUJGNKQBKIWXFGXKHVEXF",
                            TwoFactorEnabled = false,
                            UserName = "01715637291"
                        },
                        new
                        {
                            Id = "352ef6af-8t3e-4l0d-bb01-88dfa619qwo2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1991, 2, 15, 15, 33, 55, 254, DateTimeKind.Local).AddTicks(3219),
                            ConcurrencyStamp = "c00fcf43-bb53-4671-91cd-2fb94c70f1cb",
                            CreatedDateTime = new DateTime(2021, 2, 15, 15, 33, 55, 254, DateTimeKind.Local).AddTicks(3215),
                            DepartmentId = 1,
                            DesignationId = 1,
                            Email = "hmuzzal@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Asaduzzaman",
                            FullName = "Asaduzzaman Khan",
                            Gender = "Male",
                            Image = "3.jpg",
                            IsActive = true,
                            JoiningDate = new DateTime(2011, 2, 15, 15, 33, 55, 254, DateTimeKind.Local).AddTicks(3223),
                            LastName = "Khan",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIW60+N8AuqIonyaDD/ODWNY/GCLpkM2khiNDoTwsWZEtyg+iIjuAgGIej2cqvNiKA==",
                            PhoneNumber = "01715637292",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "IEC2QG3OUXJYUJGNKQBKIWXFGXKHVEXF",
                            TwoFactorEnabled = false,
                            UserName = "01715637292"
                        });
                });

            modelBuilder.Entity("LMS_Web.Models.ApprovedHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<long>("LeaveApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeaveApplicationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ApprovedHistory");
                });

            modelBuilder.Entity("LMS_Web.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WingId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Account & Finance"
                        });
                });

            modelBuilder.Entity("LMS_Web.Models.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Designation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "System Analyst"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Programmer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Assistant Director"
                        });
                });

            modelBuilder.Entity("LMS_Web.Models.EarnLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastCalculationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Obtain")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("EarnLeave");
                });

            modelBuilder.Entity("LMS_Web.Models.EarnLeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EarnLeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "গড়"
                        },
                        new
                        {
                            Id = 2,
                            Type = "অর্ধ গড়"
                        });
                });

            modelBuilder.Entity("LMS_Web.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Holiday");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromDate = new DateTime(2021, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "একুশে ফেব্রুয়ারি",
                            Remarks = "",
                            ToDate = new DateTime(2021, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            FromDate = new DateTime(2021, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "২৬শে মার্চ",
                            Remarks = "",
                            ToDate = new DateTime(2021, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LMS_Web.Models.LeaveApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EarnLeaveType")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHalfToFull")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NextApprovedPersonId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("RejectedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("NextApprovedPersonId");

                    b.HasIndex("RejectedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LeaveApplications");
                });

            modelBuilder.Entity("LMS_Web.Models.LeaveReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LeaveReason");
                });

            modelBuilder.Entity("LMS_Web.Models.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LeaveType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "নৈমিত্তিক"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "অসুস্থতাজনিত"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "অর্জিত"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "অসাধারণ"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "অধ্যয়ন"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "সংগনিরোধ"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "প্রসূতি"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "প্রাপ্যতাবিহীন"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "অবসর উত্তর"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ঐচ্ছিক"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "শ্রান্তি ও বিনোদন"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "অক্ষমতাজনিত বিশেষ"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "বাধ্যতামূলক"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "বিনা বেতনে"
                        });
                });

            modelBuilder.Entity("LMS_Web.Models.MaternityLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("TakenTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("MaternityLeave");
                });

            modelBuilder.Entity("LMS_Web.Models.NotDueLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("NonPaidAmount")
                        .HasColumnType("int");

                    b.Property<int>("Obtain")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("NotDueLeave");
                });

            modelBuilder.Entity("LMS_Web.Models.RestAndRecreationLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("NextAvailableDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TakenDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RestAndRecreationLeave");
                });

            modelBuilder.Entity("LMS_Web.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("LMS_Web.Models.SpecialDisabilityLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Obtain")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("SpecialDisabilityLeave");
                });

            modelBuilder.Entity("LMS_Web.Models.StudyLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Obtain")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("StudyLeave");
                });

            modelBuilder.Entity("LMS_Web.Models.UserLeaveQuota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("LeaveObtain")
                        .HasColumnType("int");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("UserLeaveQuotas");
                });

            modelBuilder.Entity("LMS_Web.Models.Wing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Wing");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "Super Admin",
                            NormalizedName = "Super Admin"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "3",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(127)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("AppUserId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LMS_Web.Models.AppUser", b =>
                {
                    b.HasOne("LMS_Web.Models.Department", "Department")
                        .WithMany("AppUser")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS_Web.Models.Designation", "Designation")
                        .WithMany("AppUser")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS_Web.Models.Section", null)
                        .WithMany("AppUser")
                        .HasForeignKey("SectionId");

                    b.HasOne("LMS_Web.Models.Wing", null)
                        .WithMany("AppUser")
                        .HasForeignKey("WingId");
                });

            modelBuilder.Entity("LMS_Web.Models.ApprovedHistory", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.LeaveApplication", "LeaveApplication")
                        .WithMany()
                        .HasForeignKey("LeaveApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("LMS_Web.Models.Department", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("LMS_Web.Models.Wing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId");
                });

            modelBuilder.Entity("LMS_Web.Models.Designation", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("LMS_Web.Models.EarnLeave", b =>
                {
                    b.HasOne("LMS_Web.Models.EarnLeaveType", "EarnLeaveType")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS_Web.Models.LeaveApplication", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId");

                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Web.Models.AppUser", "NextApprovedPerson")
                        .WithMany()
                        .HasForeignKey("NextApprovedPersonId");

                    b.HasOne("LMS_Web.Models.AppUser", "RejectedBy")
                        .WithMany()
                        .HasForeignKey("RejectedById");

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("LMS_Web.Models.LeaveReason", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("LMS_Web.Models.LeaveType", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("LMS_Web.Models.MaternityLeave", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LMS_Web.Models.NotDueLeave", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LMS_Web.Models.RestAndRecreationLeave", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LMS_Web.Models.Section", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("LMS_Web.Models.SpecialDisabilityLeave", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LMS_Web.Models.StudyLeave", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LMS_Web.Models.UserLeaveQuota", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("LMS_Web.Models.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS_Web.Models.Wing", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LMS_Web.Models.AppUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LMS_Web.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
